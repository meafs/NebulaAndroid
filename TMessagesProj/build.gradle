import java.security.MessageDigest

apply plugin: 'com.android.application'

repositories {
    mavenCentral()
    google()
    jcenter()
}

configurations {
    compile.exclude module: 'support-v4'
}

configurations.all {
    exclude group: 'com.google.firebase', module: 'firebase-core'
}

dependencies {
    implementation 'androidx.core:core:1.1.0-beta01'
    implementation 'androidx.palette:palette:1.0.0'
    implementation 'androidx.exifinterface:exifinterface:1.1.0'
    implementation 'androidx.dynamicanimation:dynamicanimation:1.0.0'
    implementation 'com.android.support:multidex:1.0.3'

    compileOnly 'org.checkerframework:checker-qual:2.5.2'
    compileOnly 'org.checkerframework:checker-compat-qual:2.5.0'
    implementation 'com.google.firebase:firebase-messaging:20.1.4'
    implementation 'com.google.firebase:firebase-config:19.1.3'
    implementation 'com.google.android.gms:play-services-maps:17.0.0'
    implementation 'com.google.android.gms:play-services-auth:17.0.0'
    implementation 'com.google.android.gms:play-services-vision:16.2.0'
    implementation 'com.google.android.gms:play-services-wearable:17.0.0'
    implementation 'com.google.android.gms:play-services-location:17.0.0'
    implementation "com.microsoft.appcenter:appcenter-distribute:3.1.0"
    implementation "com.microsoft.appcenter:appcenter-crashes:3.1.0"
    implementation 'com.googlecode.mp4parser:isoparser:1.0.6'
    implementation 'com.stripe:stripe-android:2.0.2'
    implementation files('libs/libgsaverification-client.aar')
}

android {
    compileSdkVersion 29
    buildToolsVersion '29.0.3'
    ndkVersion "21.0.6113669"

    defaultConfig.applicationId = "org.chatengine.messenger"

    sourceSets.main.jniLibs.srcDirs = ['./jni/']

    externalNativeBuild {
        ndkBuild {
            path "jni/Android.mk"
        }
    }

    lintOptions {
        disable 'MissingTranslation'
        disable 'ExtraTranslation'
        disable 'BlockedPrivateApi'
    }

    dexOptions {
        jumboMode = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        def keystorePwd = null
        def alias = null
        def pwd = null
        Properties properties

        if (project.rootProject.file('local.properties').exists()) {
            properties = new Properties()
            properties.load(project.rootProject.file('local.properties').newDataInputStream())
        } else {
            def base64 = System.getenv("LOCAL_PROPERTIES")
            if (base64 != null && !base64.isBlank()) {
                properties = new Properties()
                properties.load(new ByteArrayInputStream(Base64.decoder.decode(base64)))
            }
        }

        if (properties != null) {
            keystorePwd = properties.getProperty("KEYSTORE_PASS")
            alias = properties.getProperty("ALIAS_NAME")
            pwd = properties.getProperty("ALIAS_PASS")
        }

        keystorePwd = keystorePwd ?: System.getenv("KEYSTORE_PASS")
        alias = alias ?: System.getenv("ALIAS_NAME")
        pwd = pwd ?: System.getenv("ALIAS_PASS")

        release {

            storeFile project.file('release.keystore')
            storePassword keystorePwd
            keyAlias alias
            keyPassword pwd
        }

        debug {

            storeFile project.file('debug.keystore')
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"

        }
    }

    splits {

        abi {

            enable true

            reset()
            include "armeabi-v7a", "arm64-v8a", "x86", "x86_64"

            universalApk true

        }

    }

    buildTypes {
        debug {
            debuggable true
            jniDebuggable true
            signingConfig signingConfigs.debug
            //applicationIdSuffix ".beta"
            minifyEnabled true
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        /*debugAsan {
            debuggable true
            jniDebuggable true
            signingConfig signingConfigs.debug
            applicationIdSuffix ".beta"
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            packagingOptions {
                doNotStrip "**.so"
            }

            sourceSets {
                main {
                    jniLibs {
                        srcDir {
                            'jniLibs'
                        }
                    }
                    resources {
                        srcDir {
                            'jniRes'
                        }
                    }
                }
            }
        }*/

        debugMultidex {
            initWith debug
            minifyEnabled false
            multiDexEnabled true
        }

        HA {
            debuggable false
            jniDebuggable false
            signingConfig signingConfigs.debug
            //applicationIdSuffix ".beta"
            minifyEnabled true
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            debuggable false
            jniDebuggable false
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources false
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets.main {
        jni.srcDirs = []
        jniLibs.srcDir 'src/main/libs'
    }

    sourceSets.debug {
        manifest.srcFile 'config/debug/AndroidManifest_SDK23.xml'
    }

    /*sourceSets.debugAsan {
        manifest.srcFile 'config/debug/AndroidManifest.xml'
    }*/

    sourceSets.debugMultidex {
        manifest.srcFile 'config/debug/AndroidManifest.xml'
        java.srcDirs = ['src/multidex/java']
    }

    sourceSets.HA {
        manifest.srcFile 'config/debug/AndroidManifest.xml'
    }

    sourceSets.release {
        manifest.srcFile 'config/release/AndroidManifest_SDK23.xml'
    }

    flavorDimensions "minApi"

    tasks.all { task ->

        if (((task.name.endsWith('Ndk') || task.name.startsWith('generateJsonModel') || task.name.startsWith('externalNativeBuild')))) {
            task.enabled = false
        }

    }

    defaultConfig.versionCode = 2

    def tgVoipDexFileName = "libtgvoip.dex"
    def tgVoipDexClasses = ["AudioRecordJNI", "AudioTrackJNI", "NativeTgVoipDelegate", "NativeTgVoipInstance", "TgVoipNativeLoader", "Resampler", "VLog"]
    def tgVoipDexClassesPath = "org/telegram/messenger/voip"
    def dxUtilPath = "${sdkDirectory.path}/build-tools/${buildToolsVersion}/dx"

    applicationVariants.all { variant ->

        def assembleTgVoipDexTaskName = "assemble${variant.name.capitalize()}TgVoipDex"

        task "${assembleTgVoipDexTaskName}" {
            doLast {
                def sourceDir = (File) android.sourceSets.main.java.srcDirs[0]
                def classesDir = "${buildDir}/intermediates/javac/${variant.name}/classes"
                def javaDir = "${buildDir}/intermediates/java_tgvoip/${variant.name}/java"
                def tgVoipDir = new File(classesDir, tgVoipDexClassesPath)
                def javaVoipDirFile = new File(javaDir, tgVoipDexClassesPath)
                def tgVoipDexJavaFile = new File(javaVoipDirFile, "TgVoipDex.java")
                if (!javaVoipDirFile.exists()) {
                    javaVoipDirFile.mkdirs()
                }
                def assetsDirFile = new File(buildDir, "intermediates/merged_assets/${variant.name}/out")
                if (!assetsDirFile.exists()) {
                    assetsDirFile.mkdirs()
                }
                def tgVoipDexFile = new File(assetsDirFile, tgVoipDexFileName)

                def classes = tgVoipDir.list(new FilenameFilter() {
                    @Override
                    boolean accept(File dir, String name) {
                        // handle inner and anonymous classes
                        return tgVoipDexClasses.any { name == "${it}.class" || name.startsWith("${it}\$") && name.endsWith(".class") }
                    }
                }).collect { "${tgVoipDexClassesPath}/${it}" }

                // 1. create libtgvoip.dex
                exec {
                    workingDir classesDir
                    commandLine([dxUtilPath, "--dex", "--output=${tgVoipDexFile}"] + classes)
                }

                // 2. remove classes from the main dex
                project.delete classes.collect { "${classesDir}/${it}" }

                // 3. insert checksum of libtgvoip.dex into TgVoipDex.java
                def digest = MessageDigest.getInstance("SHA1")
                def fileInputStream = tgVoipDexFile.newInputStream()
                def buffer = new byte[4096]
                def len
                while ((len = fileInputStream.read(buffer)) > 0) {
                    digest.update(buffer, 0, len)
                }
                def dexChecksum = new String(Base64.getEncoder().encode(digest.digest())).trim()
                tgVoipDexJavaFile.write(new String(new File(sourceDir, "${tgVoipDexClassesPath}/TgVoipDex.java").readBytes()).replace("\$CHECKSUM\$", dexChecksum))
                exec {
                    commandLine([findJavac(), "-d", classesDir, tgVoipDexJavaFile.absolutePath])
                }
            }
        }

        tasks.findByName("compile${variant.name.capitalize()}JavaWithJavac").finalizedBy(assembleTgVoipDexTaskName)
        tasks.findByName("${assembleTgVoipDexTaskName}").mustRunAfter tasks.findByName("merge${variant.name.capitalize()}Assets")
    }

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 28
        versionName "6.1.0-r1"

        vectorDrawables.generatedDensities = ['mdpi', 'hdpi', 'xhdpi', 'xxhdpi']

        externalNativeBuild {
            ndkBuild {
                arguments "NDK_APPLICATION_MK:=jni/Application.mk", "APP_PLATFORM:=android-16", "--jobs=8"
                abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
            }
        }
    }
}

private static File findJavaHome() {
    String javaPath = System.getProperty("java.home")
    if (javaPath != null) {
        File javaBase = new File(javaPath)
        if (javaBase.exists()) {
            if (javaBase.getName().equalsIgnoreCase("jre") && new File(javaBase.getParentFile(), "bin/java").exists()) {
                return javaBase.getParentFile()
            } else {
                return javaBase
            }
        } else {
            return null
        }
    } else {
        return null
    }
}

private static File findJavac() {
    File javaHome = findJavaHome()
    if (javaHome != null) {
        return new File(javaHome, "bin/javac")
    } else {
        return null
    }
}

apply plugin: 'com.google.gms.google-services'
